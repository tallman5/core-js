{
	"name": "klipper-script",
	"scopeName": "source.klipper-script",
	"patterns": [
		{
			"include": "#stringLiteral"
		},
		{
			"include": "#keyword"
		},
		{
			"include": "#numericLiteral"
		},
		{
			"include": "#operator"
		},
		{
			"include": "#punctuation"
		},
		{
			"include": "#boolLiteral"
		},
		{
			"include": "#nullLiteral"
		},
		{
			"include": "#identifier"
		}
	],
	"repository": {
		"identifier": {
			"patterns": [
				{
					"name": "entity.name.function.filter.klipper-script",
					"match": "\\b(abs|attr|batch|capitalize|center|default|dictsort|escape|filesizeformat|first|float|forceescape|format|groupby|indent|int|join|last|length|list|lower|map|max|min|pprint|random|reject|rejectattr|replace|reverse|round|safe|select|selectattr|slice|sort|string|striptags|sum|title|tojson|truncate|unique|upper|urlencode|urlize|wordcount|wordwrap|xmlattr)\\b"
				},
				{
					"match": "\\b([_a-zA-Z][_a-zA-Z0-9]*)\\s*(?=\\()",
					"captures": {
						"1": {
							"name": "entity.name.function.klipper-script"
						}
					}
				},
				{
					"match": "(?<=\\.)([_a-zA-Z][_a-zA-Z0-9]*)",
					"captures": {
						"1": {
							"name": "variable.other.property.klipper-script"
						}
					}
				},
				{
					"match": "\\b([_a-zA-Z][_a-zA-Z0-9]*)\\b",
					"captures": {
						"1": {
							"name": "variable.other.klipper-script"
						}
					}
				}
			]
		},
		"keyword": {
			"patterns": [
				{
					"name": "keyword.control.iteration.$1.klipper-script",
					"match": "\\b(for|in|endfor)\\b"
				},
				{
					"name": "keyword.control.condition.$1.klipper-script",
					"match": "\\b(if|elif|else|endif)\\b"
				},
				{
					"name": "keyword.operator.wordlike.logical.$1.klipper-script",
					"match": "\\b(and|or|not|is)\\b"
				},
				{
					"name": "storage.type.$1.klipper-script",
					"match": "\\b(set)\\b"
				}
			]
		},
		"operator": {
			"patterns": [
				{
					"name": "keyword.operator.arithmetic.$1.klipper-script",
					"match": "(\\+|-|\\/\\/?|%|\\*\\*?)"
				},
				{
					"name": "keyword.operator.comparison.$1.klipper-script",
					"match": "(>=?|<=?|[!=]=)"
				},
				{
					"name": "keyword.operator.concatenation.klipper-script",
					"match": "~"
				},
				{
					"name": "keyword.operator.pipe.klipper-script",
					"match": "\\|"
				},
				{
					"name": "keyword.operator.assignment.klipper-script",
					"match": "="
				}
			]
		},
		"boolLiteral": {
			"name": "constant.language.boolean.klipper-script",
			"match": "\\b[Tt]rue|[Ff]alse\\b"
		},
		"nullLiteral": {
			"name": "constant.language.null.klipper-script",
			"match": "\\b[Nn]one\\b"
		},
		"numericLiteral": {
			"name": "constant.numeric.klipper-script",
			"match": "(-)?(?:[0-9]+(?:(\\.)[0-9]+)?|(\\.)[0-9]+)",
			"captures": {
				"1": {
					"name": "keyword.operator.negative.klipper-script"
				},
				"2": {
					"name": "meta.delimiter.decimal.period.klipper-script"
				},
				"3": {
					"name": "meta.delimiter.decimal.period.klipper-script"
				}
			}
		},
		"stringLiteral": {
			"name": "string.klipper-script",
			"begin": "([\"'])",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.string.begin.klipper-script"
				}
			},
			"end": "(?<!\\\\)(\\1)|\\\\\\\\(\\1)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.klipper-script"
				},
				"2": {
					"name": "punctuation.definition.string.end.klipper-script"
				}
			}
		},
		"punctuation": {
			"patterns": [
				{
					"match": "[()]",
					"name": "punctuation.brace.round.klipper-script"
				},
				{
					"match": "[{}]",
					"name": "punctuation.brace.curly.klipper-script"
				},
				{
					"match": "[\\[\\]]",
					"name": "punctuation.brace.square.klipper-script"
				},
				{
					"match": ",",
					"name": "punctuation.separator.comma.klipper-script"
				},
				{
					"match": ":",
					"name": "punctuation.separator.key-value.klipper-script"
				},
				{
					"match": "\\.",
					"name": "punctuation.accessor.klipper-script"
				},
				{
					"match": ";",
					"name": "punctuation.terminator.klipper-script"
				}
			]
		}
	}
}